package edu.brown.cs.student;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.squareup.moshi.Moshi;
import edu.brown.cs.student.main.CSVData.BroadbandDatasource;
import edu.brown.cs.student.main.CSVData.CSVData;
import edu.brown.cs.student.main.CSVData.CSVDatasource;
import edu.brown.cs.student.main.Handlers.BroadbandHandler;
import edu.brown.cs.student.main.Handlers.LoadHandler;
import edu.brown.cs.student.main.Handlers.SearchHandler;
import edu.brown.cs.student.main.Handlers.ViewHandler;
import edu.brown.cs.student.server.DefaultHandler;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import okio.Buffer;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import spark.Spark;

public class APITest {

  private static final Moshi moshi = new Moshi.Builder().build();
  private CSVDatasource source;
  private BroadbandDatasource broadbandDatasource;

  @BeforeAll
  public static void setup_before_everything() {
    // Setting port 0 will cause Spark to use an arbitrary available port.
    Spark.port(0);
    Logger.getLogger("").setLevel(Level.WARNING); // empty name = root logger
  }

  /** Shared state for all tests. We clear this state out after every test runs. */
  @BeforeEach
  public void setup() {
    // generate an empty ProtectedCsvWrapper
    this.source = new CSVData();

    Spark.get("load", new LoadHandler(this.source));
    Spark.get("search", new SearchHandler(this.source));
    Spark.get("view", new ViewHandler(this.source));
    Spark.get("broadband", new BroadbandHandler(broadbandDatasource));
    Spark.get("*", new DefaultHandler());
    Spark.init();
    Spark.awaitInitialization(); // don't continue until the server is listening
  }

  @AfterEach
  public void teardown() {
    // Gracefully stop Spark listening on both endpoints
    Spark.unmap("/load");
    Spark.unmap("/search");
    Spark.unmap("/view");
    Spark.unmap("/broadband");
    Spark.awaitStop(); // don't proceed until the server is stopped
  }

  /**
   * Helper to start a connection to a specific API endpoint/params
   *
   * @param apiCall the call string, including endpoint (NOTE: this would be better if it had more
   *     structure!)
   * @return the connection for the given URL, just after connecting
   * @throws IOException if the connection fails for some reason
   */
  private static HttpURLConnection tryRequest(String apiCall) throws IOException {
    // Configure the connection (but don't actually send the request yet)
    URL requestURL = new URL("http://localhost:" + Spark.port() + "/" + apiCall);
    HttpURLConnection clientConnection = (HttpURLConnection) requestURL.openConnection();

    // The default method is "GET", which is what we're using here.
    // If we were using "POST", we'd need to say so.
    // clientConnection.setRequestMethod("GET");

    clientConnection.connect();
    return clientConnection;
  }

  /**
   * Helper function to read JSON from moshi. Used for testing
   *
   * @param clientConnection - the HTTP URL connection resulting from sending an API query
   * @return a map of String, Object pairs generated by moshi
   */
  private static Map getResponse(HttpURLConnection clientConnection) throws IOException {
    return moshi
        .adapter(Map.class)
        .fromJson(new Buffer().readFrom(clientConnection.getInputStream()));
  }

  /** Tests JSON outputs failure messages for non-implemented endpoints */
  @Test
  public void testRandomEndpoint() throws IOException {
    HttpURLConnection clientConnection = tryRequest("x");
    Map<String, Object> response = getResponse(clientConnection);
    assertEquals("error_bad_json", response.get("result"));

    clientConnection = tryRequest("notweather");
    response = getResponse(clientConnection);
    assertEquals("error_bad_json", response.get("result"));

    clientConnection = tryRequest("?filepath=src/test/java/edu/brown/cs/student/csv/empty.csv");
    response = getResponse(clientConnection);
    assertEquals("error_bad_json", response.get("result"));

    clientConnection.disconnect();
  }

  @Test
  public void TestLoadCsvPath() throws IOException {
    HttpURLConnection clientConnection =
        tryRequest("loadcsv?filepath=data/census/income_by_race.csv");
    assertEquals(200, clientConnection.getResponseCode());
  }
}
